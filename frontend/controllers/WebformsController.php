<?php

namespace frontend\controllers;

use backend\modules\webforms\models\ContactUsWebform;
use backend\modules\webforms\models\ComplaintWebform;
use backend\modules\webforms\models\IntimationWebform;
use backend\modules\webforms\models\JoinUsWebform;
use backend\modules\webforms\models\ProtectionWebform;
use backend\modules\webforms\models\SeaAllegationWebform;
use backend\modules\webforms\models\DonationCampainWebform;

use backend\modules\e_card\models\ECard;

use common\components\TuaClient;
use common\helpers\Utility;
use frontend\models\UdheiaForm;
use frontend\models\ZakaForm;
use frontend\models\ZakaFormDynamicAmoutCurrency;
use yii\web\BadRequestHttpException;
use backend\modules\bms\models\Bms;
use backend\modules\faq\models\Faq;

use Yii;


/**
 * Site controller
 */
class WebformsController extends \yeesoft\controllers\BaseController
{
    public $freeAccess = true;


    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;

        try {
            return parent::beforeAction($action);
        } catch (BadRequestHttpException $e) {
            return false;
        } // TODO: Change the autogenerated stub
    }

    /**
     * Displays contact page.
     *
     * @return mixed
     */
    public function actionContactUs()
    {
        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'ContactUs';


        
        $data['contactUSRightSection'] =  Bms::find()
        ->activeWithCategory("contact-us-right-section")
        ->one();
        

        try {
        //select category boxes from bms table 

        //PhoneInputAsset::register($this->view);
        $model = new ContactUsWebform();
        $postData = Yii::$app->request->post('ContactUsWebform', []);
        $cleanPostData = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['ContactUsWebform' => $cleanPostData], 'ContactUsWebform') && $model->save()) {

            $emails = Yii::$app->settings->get('site.contact_us_email');
            Utility::sendEmailToAdmin($model, $emails);
            Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
            return $this->redirect(Yii::$app->request->referrer);

        }
        $data['model'] = $model;
        return $this->render('contact-us', $data);

        } catch (\Exception $th) {
            return $th->getMessage();
        }

    }





    public function actionSeaAllegation()
    {
        $this->layout = 'main-inner';
        try{
            $data['seaAllegationFirstSection'] =  Bms::find()
            ->activeWithCategory("sea-allegation-first-section")
            ->one();

        $model = new SeaAllegationWebform();
        $postData = Yii::$app->request->post('SeaAllegationWebform', []);
        $cleanPostData = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['SeaAllegationWebform' => $cleanPostData], 'SeaAllegationWebform') && $model->save()) {

            $emails = Yii::$app->settings->get('site.sea_allegation_email');
            Utility::sendEmailToAdmin($model, $emails);
            Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
            return $this->redirect(Yii::$app->request->referrer);

        }
        $data['model'] = $model;
        return $this->render('sea-allegation', $data);

        } catch (\Exception $th) {
            return $th->getMessage();
        }
    }


    public function actionProtection()
    {
        $this->layout = 'main-inner';

        try{
            $data['protectionFirstSection'] =  Bms::find()
            ->activeWithCategory("protection-form-first-section")
            ->one();

        $model = new ProtectionWebform();
        $postData = Yii::$app->request->post('ProtectionWebform', []);
        $cleanPostData = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['ProtectionWebform' => $cleanPostData], 'ProtectionWebform') && $model->save()) {

            $emails = Yii::$app->settings->get('site.protection_email');
            Utility::sendEmailToAdmin($model, $emails);
            Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
            return $this->redirect(Yii::$app->request->referrer);

        }
        $data['model'] = $model;
        return $this->render('protection', $data);

        } catch (\Exception $th) {
            return $th->getMessage();
        }
    }


    
    public function actionJoinUs()
    {
        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'join-us';

        try {



            //PhoneInputAsset::register($this->view);
            $model = new JoinUsWebform();
    
    
            if ($model->load(Yii::$app->request->post())) {
             
                $model->getFileInstance();
    
                    if ($model->validate()) {
                        
                        $model->uploadFiles();
                        $model->save(false);
                        $emails = Yii::$app->settings->get('site.join_us_email');
                        Utility::sendEmailToAdmin($model, $emails);
                        Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
                        return $this->redirect(Yii::$app->request->referrer);

                    }
                
            }
    
    
            $data['model'] = $model;
    
            
            return $this->render('join-us', $data);
    
     
            } catch (\Exception $th) {
         
                var_dump( $th->getMessage());
                exit();
            }

    }
    public function actionIntimation()
    {
        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'Intimation-form';


        
        $data['intimationSection'] =  Bms::find()
        ->activeWithCategory("intimation-form-first-section")
        ->one();
        

        try {
        //select category boxes from bms table 

        //PhoneInputAsset::register($this->view);
        $model = new IntimationWebform();
        $postData = Yii::$app->request->post('IntimationWebform', []);
        $cleanPostData = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['IntimationWebform' => $cleanPostData], 'IntimationWebform') && $model->save()) {

            $emails = Yii::$app->settings->get('site.initimation_email');
            Utility::sendEmailToAdmin($model, $emails);
            Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
            return $this->redirect(Yii::$app->request->referrer);

        }
        $data['model'] = $model;
        return $this->render('intimation', $data);

        } catch (\Exception $th) {
            return $th->getMessage();
        }

    }

    public function actionComplaint()
    {
        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'Complaints';


        $data['complaintRightSection'] =  Bms::find()
        ->activeWithCategory("complaint-right-section")
        ->one();

        try {
        $model = new ComplaintWebform();
        $postData = Yii::$app->request->post('ComplaintWebform', []);
        $cleanPostData = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['ComplaintWebform' => $cleanPostData], 'ComplaintWebform') && $model->save()) {

            $emails = Yii::$app->settings->get('site.complaint_email');
            Utility::sendEmailToAdmin($model, $emails);
            Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
            TuaClient::Complaint($model);
            return $this->redirect(Yii::$app->request->referrer);

        }
        $data['model'] = $model;
        return $this->render('complaint', $data);

        } catch (\Exception $th) {
            return $th->getMessage();
        }
    }

    
    public function actionDonationCampaign()
    {
        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'Complaints';

        $data['cards'] = ECard::find()->active()->where(['promote_to_form'=> ECard::STATUS_PUBLISHED])->all();

        
        try {
            //select category boxes from bms table 
    
            //PhoneInputAsset::register($this->view);
            $model = new DonationCampainWebform();
            $postData = Yii::$app->request->post('DonationCampainWebform', []);
            $cleanPostData = Utility::sanitize($postData);
    
            if (Yii::$app->request->isPost && $model->load(['DonationCampainWebform' => $cleanPostData], 'DonationCampainWebform') && $model->save()) {
    
                $emails = Yii::$app->settings->get('site.donation_campaing_email');
                Utility::sendEmailToAdmin($model, $emails);
                Yii::$app->session->addFlash('success', Yii::t('site', 'TNKX_FOR_SUBMITION'));
                TuaClient::CreateCampaign($model);
                return $this->redirect(Yii::$app->request->referrer);
    
            }
            $data['model'] = $model;
            return $this->render('donation-campaign', $data);
    
            } catch (\Exception $th) {
                return $th->getMessage();
            }

    }




    public function actionZakatCalculation()
    {
        $this->view->registerMetaTag(['robots' => 'noindex, nofollow']);

        $this->layout = 'main-inner';
        $this->view->params['mainIdName'] = 'ZakatCalculator';

        $model = new ZakaForm();
        $data = Yii::$app->request->post();
        $model->cashList = [new ZakaFormDynamicAmoutCurrency()];
        $data["model"] = $model;

        if ( $model->load(Yii::$app->request->post())  ) 
        {
         
            $data["result"] = $model->result;
        }

        // zakat calculation url

        $data['zakatCalculationUrl']= Bms::find()
        ->activeWithCategory("zakat-calculation-url")
        ->one();

             // zakatsections
             $data['calculationFaqSections']= Faq::find()->where(['promote_to_zakat'=>Faq::STATUS_PUBLISHED])->all();
             
             $data['calculationSections']= Bms::find()
             ->activeWithCategory("calculation-sections")
             ->all();
             
        return $this->render('zakat-calculation', $data);
    }

    public function actionUdheia()
    {
        $this->layout = "main";
        $this->view->params['mainIdName'] = 'Check-Your-Udhiyah';


        $model = new UdheiaForm();
        $postData = Yii::$app->request->post('UdheiaForm', []);
        $UdheiaForm = Utility::sanitize($postData);

        if (Yii::$app->request->isPost && $model->load(['UdheiaForm' => $UdheiaForm], 'UdheiaForm')) {

            $slug = $model->reciept_number;
            return $this->redirect(['webforms/udheia-result', 'slug' => $slug]);

        }
        $data['model'] = $model;

        $data['udheiaBlock']= Bms::find()
        ->activeWithCategory("udheia-blocks")
        ->one();

        return $this->render('udheia',$data);
    }
    public function actionUdheiaResult($slug)
    {
        $this->layout = "main";
        $this->view->params['mainIdName'] = 'Check-Your-Udhiyah';
        $data['slug'] = $slug;
        
        $apiResponse  = TuaClient::UdhiyahStatus($slug)['response'];

        $data['apiResponse'] = $apiResponse;

        if($data['apiResponse'] == null){
            Yii::$app->session->addFlash('error', Yii::t('site', 'THE_RECEIPT_NUMBER_NOT_VALID'));

            return $this->redirect('/udheia');

        }

 

        return $this->render('udheia-result',$data);
    }


}
