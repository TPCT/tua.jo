<?php

namespace frontend\modules\account\controllers;

use frontend\modules\account\models\client\Client;
use frontend\modules\account\models\secondary_user\forms\CreateForm;
use frontend\modules\account\models\secondary_user\forms\UpdateStatusForm;
use frontend\modules\controllers\BaseController;
use GuzzleHttp\Promise\Create;
use kartik\form\ActiveForm;
use Yii;
use yii\filters\VerbFilter;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

class SecondaryUsersController extends BaseController
{
    public function beforeAction($action)
    {
        if (in_array($action->id, ['create', 'update-status'])){
            $this->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'create' => ['post'],
                    'update-status' => ['post']
                ],
            ],
        ]);
    }

    public function __construct($id, $module, $config = []){
        parent::__construct($id, $module, $config);
        $this->layout = 'dashboard';
    }

    public function actionIndex(){
        $data['user'] = Yii::$app->user->identity;
        $data['model'] = new CreateForm();
        return $this->render('index', $data);
    }

    public function actionUpdateStatus(){
        Yii::$app->response->format = 'json';
        $request_body = json_decode(Yii::$app->request->rawBody);
        $model = new UpdateStatusForm();
        $data['UpdateStatusForm'] = [
            'guid' => $request_body->ContactId,
            'status' => $request_body->Status
        ];


        if ($model->load($data) && $model->validate())
            return [
                'success' => $model->update(),
                'errors' => null,
                'response' => []
            ];

        return [
            'success' => false,
            'errors' => $model->errors,
            'response' => null
        ];
    }

    public function actionCreate(){
        Yii::$app->response->format = 'json';
        $request_body = json_decode(Yii::$app->request->rawBody);

        $model = new CreateForm();
        $client = Client::find()->where(['guid' => $request_body->PrimaryContactId])->one();

        $data['CreateForm'] = [
            'guid' => $request_body->ContactId,
            'name' => $request_body->Fullname,
            'email' => $request_body->Email,
            'parent_id' => $client?->id
        ];

        if ($model->load($data) && $model->validate()) {
            return [
                'success' => $model->create(),
                'errors' => null,
                'response' => [],
            ];
        }

        return [
            'success' => false,
            'errors' => $model->errors,
            'response' => null
        ];
    }
}